
What's the key to discipering when a piece can move or attack...? 

Is there really a difference? 

The piece can move in it's own pattern as long as it:

Urgent to do tasks:

- [COMPLETED] Add primitive movement logic to the game such as
  so basically we click and focus a square then when another sqaure 
  is clicked we need to basically move focused sqaure to new sqaure where
  the square is "canMoveToOrAttack" is true. -> completed.


- [COMPLETED] Add logic for being able to take another piece
  -- If the other piece is of the opposite color


- [COMPLETED] Add another rewrite of pondHelper, to be able to make moves without 
               throwing error when moving... 


- [URGENT TODO NEXT] The main software development workflow for all piece 
logic for the game, basically when a move is made we calculate if the move can even be
made and when or how it can be made. 

- [Urgent bug fix -> FIXED] "when clicking piece, first click you see double space for pond, when you unfocus then focus again
                    You only see one space. This is due to setting this.hasMoved, when it shouldn't. 

- [Urgent bug fix -> FIXED] Need to fix logic for when clicking piece, it focuses and then unfocuses. 

- [Incomplete -> complete] Add logic for not being able to move past when lane or path is blocked
          - Need to add logic for King and Knight. -> 

- [Incomplete -> FIXED] Is the piece respecting it's rules of the game such as: 
  - Bishop can't jump or move over it's own pieces
  - If it does move and takes a piece then it can only take that piece and be placed there 


- [Incomplete -> COMPLETED] Note: I added basic logic for moving king, still need to implement

- [Incomplete -> COMPLETED] Refactor to FindMoves (to use TryGetPiece -> )

TODO NOW: 

----------------------------------------------------------------

- [Incomplete] Implement turn style moving, So white then black can move, with text on the
               board, and add timers counting down from 10:00 minutes, with a start button. 

- [Incomplete] Add abstractions for helper methods to remove duplication
               for finding proper path... Need to think to make sure that is the
               proper way forward, as to not over complicate this the logic. 

               - to sum this task above, is basically for the moment finish utilization of 
               using 'getChessPiecesSquares' as to remove numerous lines of duplication 
               then I can resolve this task item

- [Incomplete]: Add "check" logic for King

- [Incomplete]: Add "check-mate" logic for King 

----------------------------------------------------------------




TODOS LATER: 

- [INCOMPLETE - Logic for implementing stalemate]...

- [Incomplete] Should identify "attack" as diffierent as canMoveToOrAttack?

- [Incomplete] Add abstraction for chess rules that covers all pieces? think and comtemplate this.            

- [Incomplete] Add rest of pond movement logic (Including En Passant)
     - En Passsant
     - Pond reaching the end of the board then being able to upgrade to "Rook, Bishop, Rook, Queen".
  
- [Incomplete] It's not creating check, create a check, and check-mate method.

- [Incomplete] Add castle ability

Use this above test case above. 

How to approach this issue of moving pieces?

I'm thinking the 1st iteration of chess after all things are completed. 





NOTE: 

 $env:NODE_OPTIONS = "--openssl-legacy-provider"

 When the following error happens: 


 Your global Angular CLI version (15.0.2) is greater than your local version (8.3.19). The local Angular CLI version is used.

To disable this warning use "ng config -g cli.warnings.versionMismatch false".
10% building 3/3 modules 0 activei ｢wds｣: Project is running at http://localhost:4200/webpack-dev-server/
i ｢wds｣: webpack output is served from /   
i ｢wds｣: 404s will fallback to //index.html
10% building 3/4 modules 1 active ...dev-server\client\index.js?http://0.0.0.0:0/sockjs-node&sockPath=/sockjs-nodenode:internal/crypto/hash:71
  this[kHandle] = new _Hash(algorithm, xofLen);